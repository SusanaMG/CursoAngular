===============================================================================
===============================================================================
TEMA 01 Introduccion_ instalacion y estructura de archivos
**********************************************************

===============================================================================
Video 002: 002 Instalacion de Angular CLI

Para instalar TypeScript:
C:\Users\A702362>npm config set proxy http://10.89.0.72:84
C:\Users\A702362>npm config set https-proxy http://10.89.0.72:84
C:\Users\A702362>npm install -g typescript

Fuente: https://jjasonclark.com/how-to-setup-node-behind-web-proxy/

===============================================================================
Video 003: 003 Arranque de Aplicacion y Estructura de Archivos

Arrancar el servidor (en consola):
ng serve

Parar el servidor (en consola):
Ctrl+C

Ver el proyecto en navegador: 
localhost:4200
-------------------------------------
Arrancar el servidor en otro puerto (en consola):
ng serve --port 3000

Parar el servidor (en consola):
Ctrl+C

Ver el proyecto en navegador: 
localhost:3000
-------------------------------------
ESTRUCTURA DE ARCHIVOS:
** Fichero index.html
Angular está pensado para hacer aplicaciones en las que el cliente va a ser el navegdor web, por lo tanto, va a tener un archivo index.html en el que se va a renderizar la app (con la etiqueta <app-root></app-root>).

** Fichero favicon.ico
Icono de la página web.

** Fichero styles.css
Estilos css globales para toda la aplicación.

** Fichero package.json
Dependencias, paquetes o librerías de angular que vamos a utilizar en la aplicación y que se instalan en la carpeta node-modules. 

** Directorio src
Donde se va a encontrar los archivos con el código.

** Directorio assets
Los archivos estáticos, especialmente las imágenes.

** Directorio app
Los módulos y componentes de la aplicación. Como está modularizada la aplicación. CLI automáticamente crea unos módulos al inicio. 

===============================================================================
Video 004: 004 Modulos y Componentes en Angular

Todos los módulos tienen que tener al menos un componente.

COMPONENTE: en el fichero typeScript (nombre.component.ts) es donde se define la lógica del componente. Tiene 3 bloques de código: 
** Importaciones: 
Importa paquetes/clases de Angular para hacer la aplicación lo más ligera posible. 
** Decorador: 
@Component: tiene un objeto con 3 metadatos: selector (el componente se va a renderizar en la etiqueta que define 'app-root'), templateUrl (donde está la plantilla html) y styleUrls (donde está la hoja u hojas con los estilos de este componente concreto).
** Exportaciones: 
Exporta la clase del componente (ej. nombreComponent) y en la clase reside la lógica del componente.

MÓDULO:
** Importaciones: 
Importa paquetes/clases de Angular y también importa el componente.
** Decorador: 
@NgModule: tiene un objeto con 3 metadatos: declarations (declaraciones de las clases de los componentes que vamos a utilizar), imports (importa otros módulos) y providers (servicios para utilizarlos en todos los componentes).
-Si es el módulo raíz, el decorador @NgModule tiene otro metadato que es bootstrap, que indica cuál es el componente con el que se va a inicializar el módulo. 
** Exportaciones: 
Exporta la clase del módulo (ej. nombreModule).

El módulo y el componente llegan a index.html porque desde el módulo exportamos la clase del componente, y en el archivo main.ts definimos con  'platformBrowserDynamic().bootstrapModule(nombreModule)' que el módulo va a ser el módulo raíz de la aplicación. 

===============================================================================
Video 006: 006 Creacion de Componentes
Creación de un componente a mano.

===============================================================================
Video 007: 007 Nuevo Componente con Angular CLI

Antes de generar el componente, paramos el servidor desde consola. 

Para generar el componente: 
ng generate component nombrecomponente

Para generar el componente sin archivo spec para los test:
ng generate component copyright --spec false

===============================================================================
Video 008: 008 Componentes Anidados

Para cuando tenemos pocas líneas de código en un componente, podemos hacer una eliminación de ese archivo y poner el código HTML directamente en un metadato del decorador del componente en el fichero typeScript. Cambiamos el metadato "templateUrl: ''" por el metadato "template: `<código HTML>`" (con comillas inclinadas). 

También, podemos anidar componentes introduciendo unos dentro de otros. Se realiza al meter la etiqueta del componente en el metadato "template: `<etiqueta del componente inferior>`" del componente de un nivel superior.

===============================================================================
===============================================================================
TEMA 02 Data Binding
********************

===============================================================================
Video 009: 009 Data Binding_ Introduccion

Data Binding: (unión de datos) en Angular, en los componentes unimos datos entre la plantilla html y la clase del componente que está en el archivo typeScript. 

Hay varias formas:
** One Way Binding: en un sentido, desde la fuente de datos (archivo typeScript) a la vista HTML. Hay 2 fórmulas: Interpolación y Property Binding. 
** One Way Binding: en sentido contrario, desde la vista HTML a la fuente de datos. Tenemos la fórmula: Event Binding.
** Two Way Binding: en ambos sentidos, de la fuente de datos () a la vista HTML y viceversa. Tenemos la fórmula: Two Way Binding.

===============================================================================
Video 010: 010 Interpolacion

Usa la sintaxis "Mustache" de dobles llaves para presentar, de la clase del componente a la plantilla HTML, el valor de una propiedad, el valor de un objeto o una expresión JavaScript. 

1º: creación de una clase constructora de un objeto en angular: a través de un archivo nombre.modelo.ts, que contiene la exportación de la clase, la definición de las propiedades publicas de la clase y el constructor del objeto. Los archivos de clases se crean dentro de la carpeta modelos en la ruta de la ruta src/nombreaplicacion/modelos. 

2º: una vez creado el objeto, vamos a crear un componente:
ng g c nombrecomponente --spec false
(g=generate c=componente)

3º: en el componente, en el fichero typeScript, importamos el objeto y en la clase creamos el objeto. 

4º: en la plantilla HTML del componente metemos un código HTML en el que usamos la interpolación poniendo las propiedades del objeto dentro de las dobles llaves y con la notación del punto nombreobjeto.propiedad)

===============================================================================
Video 011: 011 Interpolacion con Metodos

Utilizar la interpolación para pasar un metodo de la clase del componente a la plantilla del componente.

1º: una vez creado el objeto, vamos a crear un componente:
ng g c nombrecomponente --spec false
(g=generate c=componente)

2º: en la clase del componente creamos una propiedad y la inicializamos. Luego creamos un método metodo(), por ejemplo que devuelva la propiedad creada.

3º: en la plantilla HTML del componente metemos un código HTML en el que usamos la interpolación llamando al método dentro de las dobles llaves {{ metodo() }}.

===============================================================================
Video 012: 012 Property Binding

De la clase del componente a la plantilla. Se aprovecha cualquier atributo que tenga un elemento HTML para asociarlo con una expresión que provenga del componente. Se usan los corchetes en el atributo de HTML y su valor se obtiene del fichero typeScript (tanto de una declaración como de un método).

===============================================================================
Video 013: 013 Event Binding

Manda datos de la plantilla HTML a la clase del componente aprovechando los eventos HTML5. 

Se pone el evento a usar y se iguala a un método que se va a declarar en el componente. 

===============================================================================
Video 014: 014 Two Way Binding

Se pasan los datos en ambos sentidos. 

1º: en la plantilla HTML se usa la sintaxix "Banana box" en las propiedades de un elemento HTML [(directiva)]="propiedaddelaclase".

2º: en la clase del componente se define la propiedad y la directiva es la que se encarga de almacenar la información y pasarla de la clase de la propiedad a la plantilla y viceversa.

3º: hay que fijarse en el módulo nombre.module.ts para comprobar si se ha importado FormsModule:
import { FormsModule } from '@angular/forms';

===============================================================================
===============================================================================
TEMA 03 Directivas
******************

===============================================================================
Video 015: 015 Directivas_ Introduccion

Las directivas son clases Angular con código para crear, formatear e interaccionar con los elementos HMTL en el DOM de las páginas web. 

Hay 3 tipos de directivas:
** Componentes: 
Normalmente no nos referimos a los componentes como directivas.

** Estructurales: 
Son las que alteran el layout o presentación del elemento HTML en el que las introducimos. Se preceden siempre de * (asterisco).
  <elementoHTML *DIRECTIVA="EXPRESION"></elementoHTML>

** De atributos: 
No modifican el layout. Funcionan como un atributo HTML. Van entre corchetes.
  <elementoHTML [DIRECTIVA]="{EXPRESION}"></elementoHTML>

Podemos crear nuestras propias directivas.

===============================================================================
Video 016: 016 ngIf

Es de tipo estructural (modifica el DOM).

ngIf: se mostrará el elemento HTML donde la hemos puesto si se cumple la expresión que tiene a continuación.

  <elementoHTML propiedades="" *ngIf="expresion1"></elementoHTML>

===============================================================================
Video 017: 017 ngIf + else

Es de tipo estructural (modifica el DOM).

ngIf + else: se mostrará el elemento HTML donde la hemos puesto si se cumple la expresión que tiene a continuación el if. Después de la expresión que queremos que se cumpla con ngIg, se pone "; else" y una id. Esa id es una id local de un etiqueta de Angular llamada ng-template. Se define esa etiqueta <ng-template #nombredeidlocal> a continuación del elemento HTML que lleva la directiva y dentro del código de la etiqueda se va a mostrar con el else de la directiva ngIf.  
  <elementoHTML propiedades="" *ngIf="expresion1; else nombredeidlocal">          
  </elementoHTML>
  <ng-template #nombredeidlocal>
    <elementoHTML propiedades=""></elementoHTML>
  </ng-template>

===============================================================================
Video 018: 018 ngIf + else con metodos

Es de tipo estructural (modifica el DOM).

ngIf + else con métodos: se mostrará el elemento HTML donde la hemos puesto si se cumple la expresión que tiene a continuación el if. Después de la expresión que queremos que se cumpla con ngIg, se pone "; else" y una id. Esa id es una id local de un etiqueta de Angular llamada ng-template. Se define esa etiqueta <ng-template #nombredeidlocal> a continuación del elemento HTML que lleva la directiva y dentro del código de la etiqueda se va a mostrar con el else de la directiva ngIf.  

La expresión de los condicionales puede ser la llamada a un método que se definirá en el fichero typeScript del componente.

===============================================================================
Video 019: 019 ngStyle

Es de atributo (no modifica el layout del DOM).

ngStyle: determina el estilo del elemento HTML en función de la expresión que pongamos dentro entre llaves. 

  <elementoHTML [ngStyle]="{EXPRESION}"></elementoHTML>

  <elementoHTML [ngStyle]="{propiedadcss: metodo()}"></elementoHTML>
===============================================================================
Video 020: 020 ngClass

Es de atributo (no modifica el layout del DOM).

ngClass: actúa dinámicamente en las clases de los elementos HTML. Aplica la clase  css que indica entre las llaves cuando la expresión se cumpla. 

  <elementoHTML [ngClass]="{ nombreclasecss: EXPRESION }"></elementoHTML>

===============================================================================
Video 021: 021 ngFor

Es de tipo estructural (modifica el DOM).

ngFor: para iterar arrays, etc. y mostrar tantos elementos HTML como iteraciones se realicen.

  <elementoHTML *ngFor="let variablelocal of array">{{ variablelocal }}          </elementoHTML>

===============================================================================
Video 022: 022 ngFor con objetos

Es de tipo estructural (modifica el DOM).

ngFor con objetos: para iterar objetos. Los objetos se declaran y definen en el fichero typeScript. Por ejemplo, objetos procedentes de una clase que se tenga en el proyecto y que se pueden meter en un array. En la plantilla HTML, se itera el array y se accede a las propiedades de los objetos mediante la notación del punto () 
  <elementoHTML>{{ variablelocal.propiedad }}</elementoHTML>

===============================================================================
Video 023: 023 ngSwitch

Es de atributo (no modifica el layout del DOM).

ngSwitch: asignamos la directiva a una propiedad o variable y dependiendo del valor que ésta tenga, realizará una expresión u otra que se le indique. Por ejemplo, aplicar una clase de CSS. Por cada valor o condición, se crea un elemento HTML asociado a la expresión.

Ejemplo: 
  <li *ngSwitchCase="'valor'" class="clase1">
    <h4>{{ objeto.propiedad }} | {{ objeto.propiedad }}</h4>
  </li>
  <li *ngSwitchCase="'valor'" class="clase2">
    <h4>{{ objeto.propiedad }} | {{ objeto.propiedad }}</h4>
  </li>

===============================================================================
Video 024: 024 Creacion de Directivas Propias

Para crear la directiva se puede utilizar la herramienta de modo de comando de CLI:
ng generate directive nombredirectiva

Para aplicar la directiva:
En la plantilla HTML del componente, en cada elemento HTML en el que se quiera aplicar la directiva, se pone el nombre de la misma que se obtiene en el fichero nombre.directive.ts en el metadato "selector" del decorador @Directive.

La directiva creada automáticamente (y en nombre.module.ts se importa y se declara automáticamente) tiene:
** Importaciones:
Se importa la clase Directive del core de Angular. 
** Decorador:
@Directive: indica el nombre que va a tener la directiva para luego poder implementarla en los componentes.
** Exportaciones: 
Exporta la clase donde va el código que va a realizar la directiva. 

Las directivas propias permiten implementar otras clases y decoradores que proporciona Angular. Estas clases se han de importar en la directiva y se implementan como decoradores (con @) en la clase de la directiva. 
  @ClaseImportada(EXPRESION) 

  Ejemplos:
  @HostBinding('class.clasecss') private propiedad: tipo;

  @HostListener('evento') metodo() {
    //Código del método
  }

Si estamos aplicando una clase CSS, como la idea es que se pueda usar en toda la aplicación, se incluirá en el fichero src/styles.css

===============================================================================
Video 025: 025 Datos entre Componentes_ @Input

Para pasar PROPIEDADES entre componentes.

Si queremos que una propiedad de una clase en un componente hijo reciba el valor de otro componente padre:

1º: en el componente hijo, en el fichero typeScript se importa la clase Input del core de Angular y en la clase del componente en la declaración de la propiedad se usa el decorador @Input(). En la plantilla HTML se hace referencia por interpolación a esa propiedad. 

En hijo.component.ts:
  export class HijoComponent implements OnInit {
    @Input() propiedadHijo: tipo;
  }

En hijo.component.html:
  <elementoHTML>{{ propiedadHijo }}</elementoHTML>

2º: en el componente padre, en el fichero typeScript se declara la propiedad cuyo valor se va a pasar al componente hijo. En la plantilla HTML, se incorpora la etiqueta que anida el componente hijo <app-hijo> y en esa etiqueta se pone el nombre de la propiedad en el hijo entre corchetes asociado al nombre de la propiedad del componente padre.

En padre.component.ts:
  export class PadreComponent implements OnInit {
    propiedadPadre: tipo = 'Valor que se va a inyectar del padre al hijo';
  }

En padre.component.html:
  <elementoHTML class="padre">
      <app-hijo [propiedadHijo]="propiedadPadre"></app-hijo>
  </elementoHTML>
-------------------------------------------------------------------------------
En el caso de un array:

En Angular tiene bastante utilidad cuando queremos de un array disponer de un componente generalista donde estén todos los elementos que sería el padre y de un componente hijo donde se tendrían los detalles. 

En hijo.component.ts (no hay cambios):
  export class HijoComponent implements OnInit {
    @Input() propiedadHijo: tipo;
  }

En hijo.component.html (no hay cambios):
  <elementoHTML>{{ propiedadHijo }}</elementoHTML>

En padre.component.ts:
  export class PadreComponent implements OnInit {
    arrayEnPadre: tipo[] = ['valor 1', 'valor 2', 'valor 3'];
  }

En padre.component.html:
  <elementoHTML class="padre">
    <app-hijo *ngFor="let variablelocal of arrayEnPadre" 	[propiedadHijo]="variablelocal"></app-hijo>
  </elementoHTML>

===============================================================================
Video 026: 026 Datos entre Componentes_ @Output

Para pasar MÉTODOS entre componentes.

Si queremos pasar el valor de una propiedad de un componente hijo mdiante métodos a una propiedad del componente padre:

1º: en el componente hijo, en el fichero typeScript se importa la clase Output del core de Angular (y otras clases que se necesiten como EventEmitter) y en la clase del componente en la declaración de la propiedad se usa el decorador @Output(). En la plantilla HTML se hace al método. 

En hijo.component.ts:
  export class HijoComponent implements OnInit {
    @Output() propiedadHijo = new EventEmitter();

    metodoHijo() {
      // Código donde se hace referencia a la propiedadHijo
      // En la propiedadHijo se emite lo que hya en el código
      propiedadHijo.emit(codigo);
    }
  }
o 
  export class HijoComponent implements OnInit {
    @Output() propiedadHijo: tipo;
    
    metodoHijo() {
      // Código donde se hace referencia a la propiedadHijo
      // En la propiedadHijo se emite lo que hya en el códigog
      propiedadHijo.emit(codigo);
    }
  }

En hijo.component.html:
  <elementoHTML (evento)="metodoHijo()"></elementoHTML>

2º: en el componente padre, en el fichero typeScript se define el método del padre y recoge el evento (por ejemplo, dentro de una propiedadPadre). En la plantilla HTML, se incorpora la etiqueta que anida el componente hijo <app-hijo> y en esa etiqueta se pone el nombre de la propiedad en el hijo entre paréntésis asociado al nombre del método del componente padre y fuera de la etiqueta del hijo, se pone un elemento HTML que recoja la propiedad en el padre.

En padre.component.ts:
  export class PadreComponent implements OnInit {
    propiedadPadre: tipo;

    metodoPadre(event) {
      propiedadPadre = event;
    }
  }

En padre.component.html:
  <elementoHTML class="padre">
      <app-hijo (propiedadHijo)="metodoPadre()"></app-hijo>
  </elementoHTML>

En la plantilla HTML, cuando un evento tiene varios métodos, éstos se separan por punto y coma:
  <elementoHTML (evento)="metodo1(); metodo2()"></elementoHTML>

En la plantilla HTML, cuando un evento tiene un método que tiene que recibir el evento como parámetro se escribe entre el paréntesis (metodo($event))
  <elementoHTML (evento)="metodo($event)"></elementoHTML>

===============================================================================
===============================================================================
TEMA 04 Pipes
*************

===============================================================================
Video 027: 027 Pipe Date





===============================================================================
Video 028: 028 Pipe Uppercase y Lowercase




===============================================================================
Video 029: 029 Pipe Decimal




===============================================================================
Video 030: 030 Pipe Currency




===============================================================================
Video 031: 031 Pipe i18nSelect




===============================================================================
Video 032: 032 Creacion de Pipes Propios





===============================================================================
===============================================================================
TEMA 05 Servicios
*****************

===============================================================================
Video 033:




===============================================================================
Video 034: 





===============================================================================
===============================================================================
TEMA 06 Routing
***************

===============================================================================
Video 035:




===============================================================================
Video 036: 




===============================================================================
===============================================================================
TEMA 07 Formularios
*******************

===============================================================================
Video 037:

===============================================================================
Video 038: 

===============================================================================
Video 039:

===============================================================================
Video 040: 

===============================================================================
Video 041:

===============================================================================
Video 042:

===============================================================================
Video 043:

===============================================================================
Video 044:

===============================================================================
Video 045:

===============================================================================
===============================================================================
TEMA 08 HTTP_ Base de datos en Firebase
***************************************

===============================================================================
Video 046:

===============================================================================














