===============================================================================
===============================================================================
TEMA 01 Introduccion_ instalacion y estructura de archivos
**********************************************************

Video 002: 002 Instalacion de Angular CLI

Para instalar TypeScript:
C:\Users\A702362>npm config set proxy http://10.89.0.72:84
C:\Users\A702362>npm config set https-proxy http://10.89.0.72:84
C:\Users\A702362>npm install -g typescript

Fuente: https://jjasonclark.com/how-to-setup-node-behind-web-proxy/

===============================================================================
Video 003: 003 Arranque de Aplicacion y Estructura de Archivos

Arrancar el servidor (en consola):
ng serve

Parar el servidor (en consola):
Ctrl+C

Ver el proyecto en navegador: 
localhost:4200
-------------------------------------
Arrancar el servidor en otro puerto (en consola):
ng serve --port 3000

Parar el servidor (en consola):
Ctrl+C

Ver el proyecto en navegador: 
localhost:3000
-------------------------------------
ESTRUCTURA DE ARCHIVOS:
** Fichero index.html
Angular está pensado para hacer aplicaciones en las que el cliente va a ser el navegdor web, por lo tanto, va a tener un archivo index.html en el que se va a renderizar la app (con la etiqueta <app-root></app-root>).

** Fichero favicon.ico
Icono de la página web.

** Fichero styles.css
Estilos css globales para toda la aplicación.

** Fichero package.json
Dependencias, paquetes o librerías de angular que vamos a utilizar en la aplicación y que se instalan en la carpeta node-modules. 

** Directorio src
Donde se va a encontrar los archivos con el código.

** Directorio assets
Los archivos estáticos, especialmente las imágenes.

** Directorio app
Los módulos y componentes de la aplicación. Como está modularizada la aplicación. CLI automáticamente crea unos módulos al inicio. 

===============================================================================
Video 004: 004 Modulos y Componentes en Angular

Todos los módulos tienen que tener al menos un componente.

COMPONENTE: en el fichero typeScript (nombre.component.ts) es donde se define la lógica del componente. Tiene 3 bloques de código: 
** Importaciones: 
Importa paquetes/clases de Angular para hacer la aplicación lo más ligera posible. 
** Decorador: 
@Component: tiene un objeto con 3 metadatos: selector (el componente se va a renderizar en la etiqueta que define 'app-root'), templateUrl (donde está la plantilla html) y styleUrls (donde está la hoja u hojas con los estilos de este componente concreto).
** Exportaciones: 
Exporta la clase del componente (ej. nombreComponent) y en la clase reside la lógica del componente.

MÓDULO:
** Importaciones: importa paquetes/clases de Angular y también importa el componente.
** Decorador: 
@NgModule: tiene un objeto con 3 metadatos: declarations (declaraciones de las clases de los componentes que vamos a utilizar), imports (importa otros módulos) y providers (servicios para utilizarlos en todos los componentes).
-Si es el módulo raíz, el decorador @NgModule tiene otro metadato que es bootstrap, que indica cuál es el componente con el que se va a inicializar el módulo. 
** Exportaciones: 
Exporta la clase del módulo (ej. nombreModule).

El módulo y el componente llegan a index.html porque desde el módulo exportamos la clase del componente, y en el archivo main.ts definimos con  'platformBrowserDynamic().bootstrapModule(nombreModule)' que el módulo va a ser el módulo raíz de la aplicación. 

===============================================================================
Video 006: 006 Creacion de Componentes
Creación de un componente a mano.

===============================================================================
Video 007: 007 Nuevo Componente con Angular CLI

Antes de generar el componente, paramos el servidor desde consola. 

Para generar el componente: 
ng generate component nombrecomponente

Para generar el componente sin archivo spec para los test:
ng generate component copyright --spec false

===============================================================================
Video 008: 008 Componentes Anidados

Para cuando tenemos pocas líneas de código en un componente, podemos hacer una eliminación de ese archivo y poner el código HTML directamente en un metadato del decorador del componente en el fichero typeScript. Cambiamos el metadato "templateUrl: ''" por el metadato "template: `<código HTML>`" (con comillas inclinadas). 

También, podemos anidar componentes introduciendo unos dentro de otros. Se realiza al meter la etiqueta del componente en el metadato "template: `<etiqueta del componente inferior>`" del componente de un nivel superior.

===============================================================================
===============================================================================
TEMA 02 Data Binding
********************

Video 009: 009 Data Binding_ Introduccion

Data Binding: (unión de datos) en Angular, en los componentes unimos datos entre la plantilla html y la clase del componente que está en el archivo typeScript. 

Hay varias formas:
** One Way Binding: en un sentido, desde la fuente de datos (archivo typeScript) a la vista HTML. Hay 2 fórmulas: Interpolación y Property Binding. 
** One Way Binding: en sentido contrario, desde la vista HTML a la fuente de datos. Tenemos la fórmula: Event Binding.
** Two Way Binding: en ambos sentidos, de la fuente de datos () a la vista HTML y viceversa. Tenemos la fórmula: Two Way Binding.

===============================================================================
Video 010: 010 Interpolacion

Usa la sintaxis "Mustache" de dobles llaves para presentar, de la clase del componente a la plantilla HTML, el valor de una propiedad, el valor de un objeto o una expresión JavaScript. 

1º: creación de una clase constructora de un objeto en angular: a través de un archivo nombre.modelo.ts, que contiene la exportación de la clase, la definición de las propiedades publicas de la clase y el constructor del objeto. Los archivos de clases se crean dentro de la carpeta modelos en la ruta de la ruta src/nombreaplicacion/modelos. 

2º: una vez creado el objeto, vamos a crear un componente:
ng g c nombrecomponente --spec false
(g=generate c=componente)

3º: en el componente, en el fichero typeScript, importamos el objeto y en la clase creamos el objeto. 

4º: en la plantilla HTML del componente metemos un código HTML en el que usamos la interpolación poniendo las propiedades del objeto dentro de las dobles llaves y con la notación del punto nombreobjeto.propiedad)

===============================================================================
Video 011: 011 Interpolacion con Metodos

Utilizar la interpolación para pasar un metodo de la clase del componente a la plantilla del componente.

1º: una vez creado el objeto, vamos a crear un componente:
ng g c nombrecomponente --spec false
(g=generate c=componente)

2º: en la clase del componente creamos una propiedad y la inicializamos. Luego creamos un método metodo(), por ejemplo que devuelva la propiedad creada.

3º: en la plantilla HTML del componente metemos un código HTML en el que usamos la interpolación llamando al método dentro de las dobles llaves {{ metodo() }}.

===============================================================================
Video 012: 012 Property Binding

De la clase del componente a la plantilla. Se aprovecha cualquier atributo que tenga un elemento HTML para asociarlo con una expresión que provenga del componente. Se usan los corchetes en el atributo de HTML y su valor se obtiene del fichero typeScript (tanto de una declaración como de un método).

===============================================================================
Video 013: 013 Event Binding

Manda datos de la plantilla HTML a la clase del componente aprovechando los eventos HTML5. 

Se pone el evento a usar y se iguala a un método que se va a declarar en el componente. 

===============================================================================
Video 014: 014 Two Way Binding

Se pasan los datos en ambos sentidos. 

1º: en la plantilla HTML se usa la sintaxix "Banana box" en las propiedades de un elemento HTML [(directiva)]="propiedaddelaclase".

2º: en la clase del componente se define la propiedad y la directiva es la que se encarga de almacenar la información y pasarla de la clase de la propiedad a la plantilla y viceversa.

3º: hay que fijarse en el módulo nombre.module.ts para comprobar si se ha importado FormsModule:
import { FormsModule } from '@angular/forms';

===============================================================================
===============================================================================
TEMA 03 Directivas
******************

===============================================================================
Video 015: 015 Directivas_ Introduccion

===============================================================================
Video 016: 016 ngIf

===============================================================================
Video 017: 017 ngIf + else

===============================================================================
Video 018: 018 ngIf + else con metodos

===============================================================================
Video 019: 019 ngStyle

===============================================================================
Video 020: 020 ngClass

===============================================================================
Video 021: 021 ngFor

===============================================================================
Video 022: 022 ngFor con objetos

===============================================================================
Video 023: 023 ngSwitch

===============================================================================
Video 024: 024 Creacion de Directivas Propias

===============================================================================
Video 025: 025 Datos entre Componentes_ @Input

===============================================================================
Video 026: 026 Datos entre Componentes_ @Output



===============================================================================
===============================================================================
TEMA 
****

Video 027: 

===============================================================================
Video 026: 

===============================================================================
Video 027: 

===============================================================================
Video 028: 

===============================================================================
Video 029: 

===============================================================================
Video 030: 

===============================================================================
Video 031: 




===============================================================================
===============================================================================


